package com.arotte.tool;

import java.io.IOException;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;

/** GenerateAst.java
 *
 * This class generates the Abstract Syntax Tree
 * for the Aroi programming language.
 *
 * TODO: possibly rewrite this in a scripting language
 */
public class GenerateAst {

    public static void main(String[] args) throws IOException {
        if (args.length != 1) {
            System.err.println("Usage: generate_ast <output_directory>");
            System.exit(64);
        }
        String outputDir = args[0];

        /*
        Define the Aroi grammar.
        Here, every element of the array corresponds to a rule
        in the grammar of the language.
         */
        List<String> aroiGrammar = Arrays.asList(
                "Literal  : Object value",
                "Grouping : Expr expression",
                "Unary    : Token operator, Expr right",
                "Binary   : Expr left, Token operator, Expr right"
        );

        // generate the Java class representing the AST
        defineAst(outputDir,"Expr", aroiGrammar);
    }

    private static void defineAst(
            String outputDir, String baseClassName, List<String> types)
            throws IOException {

        String path = outputDir + "/" + baseClassName + ".java";
        PrintWriter writer = new PrintWriter(path, StandardCharsets.UTF_8);

        writer.println("package com.arotte.aroi;");
        writer.println();
        writer.println("import java.util.List;");
        writer.println();
        writer.println(javadoc(baseClassName));
        writer.println("abstract class " + baseClassName + " {");

        // the AST classes
        for (String type : types) {
            String className = type.split(":")[0].trim();
            String fields    = type.split(":")[1].trim();
            defineType(writer, baseClassName, className, fields);
            System.out.println("Generating class '" + className + "'.");
        }

        // end of class definition
        writer.println("}");
        writer.close();

        System.out.println("Done.");
        System.out.println("Writing generated AST class to '" + path + "'.");
    }

    private static void defineType(
            PrintWriter writer, String baseClassName,
            String className, String fieldList) {

        writer.println(tab(1) +
                "static class " + className + " extends " + baseClassName + " {");

        // fields of the class
        String[] fields = fieldList.split(", ");
        for (String field : fields) {
            writer.println(tab(2) + "final " + field + ";");
        }

        // constructor
        writer.println(tab(2) +
                className + "(" + fieldList + ") {");

        // set fields to parameters
        for (String field : fields) {
            String name = field.split(" ")[1];
            writer.println(tab(3) +
                    "this." + name + " = " + name + ";");
        }

        // end of constructor and class definitions
        writer.println(tab(2) + "}");
        writer.println(tab(1) + "}");
    }

    private static String javadoc(String baseClassName) {
        return "/**" + baseClassName + ".java\n" +
                " *\n" +
                " * THIS IS A GENERATED FILE.\n" +
                " * DO NOT MODIFY!\n" +
                " *\n" +
                " * Generated by com.arotte.tool.GenerateAst.java\n" +
                " */";
    }

    private static String tab(int depth) {
        StringBuilder t = new StringBuilder();
        if (depth > 0) { // && depth < 100
            t.append("  ".repeat(depth));
        }
        return t.toString();
    }
}
